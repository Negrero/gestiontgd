"use strict";var ApplicationConfiguration=function(){var applicationModuleName="simple",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","angularFileUpload","jsonFormatter","ngAria","ngMaterial"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("dashboards"),ApplicationConfiguration.registerModule("subirarchivo"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("dashboards").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Dashboards","dashboards/list")}]),angular.module("dashboards").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDashboards",{url:"/dashboards/list",templateUrl:"modules/dashboards/views/list-dashboards.client.view.html"}).state("createDashboard",{url:"/dashboards/create",templateUrl:"modules/dashboards/views/create-dashboard.client.view.html"}).state("viewDashboard",{url:"/dashboards/:dashboardId",templateUrl:"modules/dashboards/views/view-dashboard.client.view.html"}).state("editDashboard",{url:"/dashboards/:dashboardId/edit",templateUrl:"modules/dashboards/views/edit-dashboard.client.view.html"})}]),angular.module("dashboards").controller("DashboardsController",["$scope","$stateParams","$location","Authentication","Dashboards","NameFile",function($scope,$stateParams,$location,Authentication,Dashboards,NameFile){$scope.authentication=Authentication,$scope.create=function(){var dashboard=new Dashboards({name:this.name});dashboard.$save(function(response){$location.path("dashboards/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(dashboard){if(dashboard){dashboard.$remove();for(var i in $scope.dashboards)$scope.dashboards[i]===dashboard&&$scope.dashboards.splice(i,1)}else $scope.dashboard.$remove(function(){$location.path("dashboards")})},$scope.update=function(){var dashboard=$scope.dashboard;dashboard.$update(function(){$location.path("dashboards/"+dashboard._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.dashboards=Dashboards.query()},$scope.findOne=function(){$scope.dashboard=Dashboards.get({dashboardId:$stateParams.dashboardId})},$scope.find_nameFile=function(){$scope.nameFiles=NameFile.query()},$scope.find_listabloque=function(id){$scope.lista=NameFile.get({fileId:id}),$scope.identification=$scope.lista.EF_IDENTIFICATION,console.log($scope.lista)}}]),angular.module("dashboards").factory("Dashboards",["$resource",function($resource){return $resource("dashboards/:dashboardId",{dashboardId:"@_id"},{update:{method:"PUT"}})}]),angular.module("dashboards").factory("NameFile",["$resource",function($resource){return $resource("nameFile/:fileId",{fileId:"@_id"},{update:{method:"PUT"}})}]),angular.module("subirarchivo").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Interpretar archivo","subirarchivo")}]),angular.module("subirarchivo").config(["$stateProvider",function($stateProvider){$stateProvider.state("subirarchivo",{url:"/subirarchivo",templateUrl:"modules/subirarchivo/views/subirarchivo.client.view.html"})}]),angular.module("subirarchivo").controller("SubirarchivoController",["$scope","FileUploader","$modal","$log","Authentication","Filestgd","$location",function($scope,FileUploader,$modal,$log,Authentication,Filestgd,$location,$stateParams){$scope.crear=function(filename,item){item.progress=0;var itemsave=new Object;$scope.itemsave=itemsave,item.mensaje="Grabando en bbdd ......",item.progressbar="indeterminate",item.isSuccess=!1;var filestgd=new Filestgd($scope.tgd[filename]);filestgd.$save(function(response){item.save=!0,item.progressbar="determinate",item.progress=100,item.mensaje=" Archivo grabado en bbdd",item.isSuccess=!0},function(errorResponse){$scope.error=errorResponse.data.message,item.isError=!0,item.isSuccess=!1,304==errorResponse.status&&(item.mensaje=" Ya existe en bbdd"),item.progress=100,item.progressbar="determinate"})},$scope.authentication=Authentication,""==$scope.authentication.user?$scope.authentication.botonsave=!1:$scope.authentication.botonsave=!0,$scope.tgd=[];var uploader=$scope.uploader=new FileUploader({url:"/file"});uploader.filters.push({name:"customFilter",progressbar:"determinate",mensaje:"",save:!1,fn:function(item,options){return this.queue.length<10}}),uploader.filters.push({name:"size",fn:function(item){return item.size<5e5}}),uploader.onWhenAddingFileFailed=function(item,filter,options){console.info("onWhenAddingFileFailed",item,filter,options)},uploader.onAfterAddingFile=function(fileItem){fileItem.upload()},uploader.onAfterAddingAll=function(addedFileItems){},uploader.onBeforeUploadItem=function(item){item.mensaje="Interpretando archivo...."},uploader.onProgressItem=function(fileItem,progress){},uploader.onProgressAll=function(progress){},uploader.onSuccessItem=function(fileItem,response,status,headers){fileItem.mensaje="Archivo Interpretado",fileItem.save=!1,console.info("onSuccessItem",fileItem.save)},uploader.onErrorItem=function(fileItem,response,status,headers){fileItem.mensaje=response,console.info(status),fileItem.mensaje=response},uploader.onCancelItem=function(fileItem,response,status,headers){},uploader.onCompleteItem=function(fileItem,response,status,headers){console.info(status),200==status&&($scope.tgd[fileItem.file.name]=response),415==status&&(fileItem.mensaje=" fichero sin bloques de datos")},uploader.onCompleteAll=function(){console.info("onCompleteAll")},console.info("uploader",uploader),$scope.open=function(size,namefile){var modalInstance=$modal.open({templateUrl:"/modules/subirarchivo/views/popup.archivo.html",controller:"ModalInstanceCtrl",size:size,resolve:{tgd:function(){return $scope.tgd[namefile]}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})}}]),angular.module("subirarchivo").controller("ModalInstanceCtrl",["$scope","$modalInstance","tgd",function($scope,$modalInstance,tgd){var key=[],values=[],lista=[],tabs=[],objeto=angular.fromJson(tgd),nameFile=objeto.nameFile;angular.forEach(tgd.lista_bloque,function(value,key){this.push(key)},key),angular.forEach(tgd.lista_bloque,function(value,key){this.push(angular.toJson(value))},values),angular.forEach(objeto.lista_bloque,function(value,key){this.push(key)},tabs);for(var i=0;i<key.length;i++)lista[key[i]]=JSON.parse(values[i]);$scope.name_blocks=key,$scope.value_blocks=values,$scope.lista_blocks=lista,$scope.tabs=tabs,$scope.tgd=objeto,$scope.nameFile=nameFile,$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("subirarchivo").factory("Filestgd",["$resource",function($resource){return $resource("file/save/",{filetgd:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);